{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Angular","result":{"pageContext":{"currentCategory":"Angular","categories":["All","React","javascript","Next","Angular","test"],"edges":[{"node":{"id":"3814e839-ed9c-5eb5-b8c4-a61caa00d547","excerpt":"angular form 종류 앵귤러는 반응형과 템플릿 기반, 두 가지 방식으로 폼을 제공합니다. 방식 설명 반응형 폼 폼 객체 모델에 직접 명시적으로 접근합니다. 템플릿 기반 폼과 비교해보면 이 방식이 확실히 사용하기 편합니다. 반응형 폼 방식은 확장하기 편하고, 재사용하기 쉬우며, 테스트하기 쉽습니다. 애플리케이션에서 폼이 중요한 역할을 하거나 애플리케이션을 반응형 패턴으로 구성했다면 반응형 폼을 사용하는 것이 좋습니다. 템플릿 기반 폼 템플릿에 디렉티브를 활용하는 방식이며 객체 모델은 디렉티브가 직접 관리합니다. 이메일을 입력받는 정도로 폼 구성이 간단하다면 템플릿 기반으로도 충분합니다. 하지만 폼 구성이 복잡해지면 반응형 폼처럼 확장하기는 어렵습니다. 구성이 간단한 폼을 템플릿 안에서만 동작하도록 구현하려면 템플릿 기반 폼을 사용하는 것이 좋습니다. 차이점  반응형 폼 템플릿 기반 폼 폼 모델 구성방식 명시적, 컴포넌트 클래스 안에서 생성 명확하지 않음, 디렉티브 내부 로직이…","fields":{"slug":"/angular-form/"},"frontmatter":{"categories":"Angular","title":"앵귤러 폼","date":"July 03, 2024"}},"next":{"fields":{"slug":"/angular-lifecycle/"}},"previous":{"fields":{"slug":"/react-mapKeyIndex/"}}},{"node":{"id":"c0be0573-a6d9-553a-80c2-9bb9509a0cc9","excerpt":"1. 라이프사이클 컴포넌트의 라이프사이클은 구성 요소의 생성과 파괴 사이에 발생하는 단계의 순서입니다. 각 단계는 구성 요소를 랜더링하고 시간 경과에 따라 업데이트를 확인하는 Angular 프로세스의 다른 부분을 나타냅니다. 이러한 단계 중에 코드를 실행하기 위해 라이프사이클 훅을 구현할 수 있습니다. 모든 주기에서 구현할 필요는 없고, 특정 주기에 구현해야할 기능이 있을 때 필요한 해당 훅 메소드를 구현하면 됩니다. Angular 생명주기 메서드 요약 단계 방법 요약 Creation  표준 JavaScript 클래스 생성자. Angular가 구성 요소를 인스턴스화할 때 실행됩니다. Change Detection  Angular가 모든 구성 요소의 입력을 초기화한 후에 한 번 실행됩니다. Change Detection  구성 요소의 입력이 변경될 때마다 실행됩니다. Change Detection  이 구성 요소의 변경 사항이 확인될 때마다 실행됩니다. Change Detection…","fields":{"slug":"/angular-lifecycle/"},"frontmatter":{"categories":"Angular","title":"앵귤러 라이프사이클","date":"July 02, 2024"}},"next":{"fields":{"slug":"/start/"}},"previous":{"fields":{"slug":"/angular-form/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}