{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/javascript","result":{"pageContext":{"currentCategory":"javascript","categories":["All","React","javascript","TypeScript","Next","Angular","test"],"edges":[{"node":{"id":"428518c7-e3eb-5fae-a6c3-f4921ef10d77","excerpt":"React에서 중복되지 않는 선택된 클래스 배열 만들기 기존 코드의 문제점 최근 프로젝트에서  배열에 사용자 선택 클래스를 추가하면서 중복된  값을 가진 객체가 여러 개 들어가는 문제가 발생했다. 원래 코드는 단순히 클래스를 추가하고 중복을 제거하는 방식이었는데, 이 방식은 시간 복잡도가 높아 비효율적이었다. 배열을 순회하면서 중복을 확인하는 데 O(n * m) 시간이 소요됐고, 데이터가 많아질수록 성능에 영향을 미쳤다. 그래서 성능을 개선하고자 시간을 단축할 수 있는 방법을 고민해봤다. 해시맵을 활용한 개선 해시맵을 사용하여 에 대한 빠른 검색을 구현하고, 중복을 효율적으로 제거하는 방법을 적용해봤다. 이 방법을 사용하면 시간 복잡도를 줄이고, 애플리케이션의 성능을 크게 향상시킬 수 있다. 이제 이 방법을 어떻게 적용했는지 설명하겠다. 데이터 형식 처음에는 와  데이터 형식을 사용하고 있었음. 데이터는 다음과 같다: 해시맵으로 변환 먼저, Cls 객체를 해시맵으로 변환했다. 이렇…","fields":{"slug":"/react-deatwitharray/"},"frontmatter":{"categories":"React javascript","title":"중복되지 않는 선택된 클래스 배열 만들기","date":"August 20, 2024"}},"next":{"fields":{"slug":"/react-dropdown/"}},"previous":{"fields":{"slug":"/react-upload/"}}},{"node":{"id":"1dc837ea-0717-5fa6-9f21-c5b21490f055","excerpt":"리액트 프로젝트에서 드롭다운 메뉴를 만들어야 했다.  위 사진과 같고 각각의 메뉴는 독립적으로 열리고 닫히기가 가능해야 한다. groups는 전체 그룹들을 담고있는 배열이고 groups와 길이가 같은 false로만 채운 배열을 기본값으로 설정 토글 함수로 해당하는 인덱스 번호의 상태를 변화시킴 div를 눌렀을 때 openMenus[index]의 상태를 변경시키고 그 상태에 따라 하위 메뉴를 보여준다.\r\n(classes는 하위 메뉴를 전부 담고있는 배열) 이렇게 하여 드롭다운 메뉴를 독립적으로 열리고 닫히도록 한 번에 관리할 수 있게 만들었다.","fields":{"slug":"/react-dropdown/"},"frontmatter":{"categories":"React javascript","title":"드롭다운 메뉴","date":"August 12, 2024"}},"next":{"fields":{"slug":"/react-mockData/"}},"previous":{"fields":{"slug":"/react-deatwitharray/"}}},{"node":{"id":"75402d32-25c0-57f6-9ace-23935f1790ec","excerpt":"위와 같은 셀렉트 태그가 있다.\r\n선택된 옵션에 따라 projectList가 정렬되어야 한다. 우선 셀렉트 태그에 value와 값 변경 시 실행할 함수를 줬다. 그런 다음 handleChange를 정의했다.\r\n해당 함수는 선택한 옵션에 따라 다른 함수를 실행하게 하여 원하는 값을 기준으로 정렬하게 했다 (sort((a,b)=>{})) 사용 그런 다음 sortOptions라는 객체에 셀렉트 태그의 value를 key 값으로 실행되어야 할 함수를 묶어서 만들었다. 이렇게 되면 셀렉트 태그를 통해 골라진 값이 event.target.value가 되어 sortOptions의 key로 넘어가게 된 뒤 그에 맞는 함수가 실행되어 filterList가 sort된다.","fields":{"slug":"/react-arraySort/"},"frontmatter":{"categories":"React javascript","title":"셀렉트 태그 이벤트를 통한 정렬","date":"August 08, 2024"}},"next":{"fields":{"slug":"/typeScript-generics/"}},"previous":{"fields":{"slug":"/react-mockData/"}}},{"node":{"id":"b4075896-e093-59dc-aaf7-674f925ecac5","excerpt":"원티드 2024.08 프리온보딩 프론트엔드 사전 과제로 search bar 컴포넌트 구현이 나왔다. 결과 alt text 신경 썼던 것 각각의 데이터의 타입으로 묶어서 보기 정렬 input value에 따라 하이라이트 적용 디바운싱 적용 각각의 데이터의 타입으로 묶어서 보기 정렬 getData 함수는 DOM 로드 시에 실행되도록 했다. 데이터 예시 - { description: “(ORCL) Oracle Corp”, key: “Oracle Corp”, type: “COMPANY” },\r\n이런 형태인데 reduce를 사용하여 type 별로 데이터를 묶었다.\r\n객체 전부를 반복문을 통해 돌기 위해 Object.entries 사용하여 배열로 변경\r\nkey가 된 type이 헤더가 되고 value가 items로 만들어 id = result인 div에 넣음 input value에 따라 하이라이트 적용 정규 표현식을 사용하여 문자 대조 후 클래스 변경 const regex = new RegEx…","fields":{"slug":"/javascript-searchBar/"},"frontmatter":{"categories":"javascript","title":"javascript search bar component","date":"July 23, 2024"}},"next":{"fields":{"slug":"/next-darkmode/"}},"previous":{"fields":{"slug":"/react-hooks/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}