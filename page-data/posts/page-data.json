{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"0cf87a6d-7252-52df-8f36-dec1ac59f42e","excerpt":"Prop drilling vs Context API, How the data is passed Props Drilling props를 오로지 하위 컴포넌트로 전달하는 용도로만 쓰이는 컴포넌트들을 거치면서 React Component 트리의 한 부분에서 다른 부분으로 데이터를 전달하는 과정 여러 컴포넌트를 거쳐 prop 된다면 데이터 추적이 어려워 유지보수가 어려워지게 된다. context를 이용하면 단계마다 일일이 props를 넘겨주지 않고도 컴포넌트 트리 전체에 데이터를 제공할 수 있음 언제 context를 써야 할까 context는 트리 안에서 전역적이라고 볼 수 있는 데이터를 공유하도록 고안된 방법 ex : 현재 로그인한 유저 정보, 테마, 선호 언어 등 API React.createContext context 객체를 만듦 context 객체를 구독하고 있는 컴포넌트를 랜더링할 때 React는 트리 상위에서 가장 가까이 있는 짝이 맞는 Provider로부터 현재값을 읽음 Co…","fields":{"slug":"/react-contextApi/"},"frontmatter":{"categories":"React","title":"리액트 Context API","date":"July 10, 2024"}},"next":{"fields":{"slug":"/next-appRouter/"}},"previous":null},{"node":{"id":"647668d9-26b8-53d8-aa79-34031f4180c0","excerpt":"next.js의 app router 방식에 대해 알아보자. next js 13 버전부터 도입된 방식 알아두면 좋은 점: 앱 라우터는 페이지 라우터보다 우선순위가 높습니다. 디렉터리 간 경로는 동일한 URL 경로로 확인되어서는 안 되며 충돌을 방지하기 위해 빌드 시간 오류가 발생합니다. 프로젝트 구조 최상위 폴더\r\n 폴더 설명 app 앱 라우터 page 페이지 라우터 public 정적 에셋 src 일반적인 패턴을 위한 폴더 src 프로젝트 루트에 특별한 Next.js 앱이나 페이지 디렉터리를 두는 대신 Next.js는 src 디렉터리 아래에 애플리케이션 코드를 배치하는 일반적인 패턴도 지원합니다. 이는 대부분 개인과 팀이 선호하는 프로젝트 루트에 있는 프로젝트 구성 파일과 애플리케이션 코드를 분리합니다. src 디렉터리를 사용하려면 앱 라우터 폴더나 페이지 라우터 폴더를 각각 src/app 또는 src/pages로 이동하세요.  라우팅 기본 사항  Tree: 계층 구조를 시각화하기 …","fields":{"slug":"/next-appRouter/"},"frontmatter":{"categories":"Next","title":"next.js app router","date":"July 05, 2024"}},"next":{"fields":{"slug":"/next-chatting/"}},"previous":{"fields":{"slug":"/react-contextApi/"}}},{"node":{"id":"13d44c07-cfa8-532a-91c5-5e5129d1f7c9","excerpt":"Next.js에서 채팅 구현 소켓 통신에 대해 알기 socket.io 작동 방식 next.js app route","fields":{"slug":"/next-chatting/"},"frontmatter":{"categories":"Next","title":"next.js 채팅 구현","date":"July 04, 2024"}},"next":{"fields":{"slug":"/react-mapKeyIndex/"}},"previous":{"fields":{"slug":"/next-appRouter/"}}},{"node":{"id":"b4e9f8e1-9d1e-5f1b-8273-822be12e3e16","excerpt":"리액트는 key가 동일 할 경우, 동일한 DOM Element를 보여줌 때문에 key를 index로 뒀을 때 문제가 생길 수 있다. 예시 line 22, 23: 추가, 삭제 버튼. 추가 버튼을 누르면 정국 데이터를 list 앞에 추가하고 삭제를 누르면 철수를 삭제한다. line 28: component가 관리하는 list 데이터를 map으로 loop 돌며 div 태그의 key를 index로 지정한다. 추가할 때 \r\n철수 input에 데이터를 입력 \r\n추가 버튼을 눌렀을 때 \r\n이러한 결과를 예상했지만 \r\n이러한 결과가 나온다. list 값이 변경되면서 index를 다시 mapping함 맨 앞에 추가된 정국은 key = 0 key가 동일 할 경우, 동일한 DOM Element 보여줌 삭제할 때 \r\n위 상황에서 삭제를 눌렀을 때 \r\n이러한 결과를 예상하지만 \r\n이러한 결과가 나온다. 삭제가 되면서 다시 mapping 영희가 철수의 index였던 0이 됨 철수 데이터가 영희에게 mapp…","fields":{"slug":"/react-mapKeyIndex/"},"frontmatter":{"categories":"React","title":"리액트 배열의 index로 key를 쓰면 안되는 이유","date":"July 03, 2024"}},"next":{"fields":{"slug":"/angular-form/"}},"previous":{"fields":{"slug":"/next-chatting/"}}},{"node":{"id":"3814e839-ed9c-5eb5-b8c4-a61caa00d547","excerpt":"angular form 종류 앵귤러는 반응형과 템플릿 기반, 두 가지 방식으로 폼을 제공합니다. 방식 설명 반응형 폼 폼 객체 모델에 직접 명시적으로 접근합니다. 템플릿 기반 폼과 비교해보면 이 방식이 확실히 사용하기 편합니다. 반응형 폼 방식은 확장하기 편하고, 재사용하기 쉬우며, 테스트하기 쉽습니다. 애플리케이션에서 폼이 중요한 역할을 하거나 애플리케이션을 반응형 패턴으로 구성했다면 반응형 폼을 사용하는 것이 좋습니다. 템플릿 기반 폼 템플릿에 디렉티브를 활용하는 방식이며 객체 모델은 디렉티브가 직접 관리합니다. 이메일을 입력받는 정도로 폼 구성이 간단하다면 템플릿 기반으로도 충분합니다. 하지만 폼 구성이 복잡해지면 반응형 폼처럼 확장하기는 어렵습니다. 구성이 간단한 폼을 템플릿 안에서만 동작하도록 구현하려면 템플릿 기반 폼을 사용하는 것이 좋습니다. 차이점  반응형 폼 템플릿 기반 폼 폼 모델 구성방식 명시적, 컴포넌트 클래스 안에서 생성 명확하지 않음, 디렉티브 내부 로직이…","fields":{"slug":"/angular-form/"},"frontmatter":{"categories":"Angular","title":"앵귤러 폼","date":"July 03, 2024"}},"next":{"fields":{"slug":"/angular-lifecycle/"}},"previous":{"fields":{"slug":"/react-mapKeyIndex/"}}},{"node":{"id":"c0be0573-a6d9-553a-80c2-9bb9509a0cc9","excerpt":"1. 라이프사이클 컴포넌트의 라이프사이클은 구성 요소의 생성과 파괴 사이에 발생하는 단계의 순서입니다. 각 단계는 구성 요소를 랜더링하고 시간 경과에 따라 업데이트를 확인하는 Angular 프로세스의 다른 부분을 나타냅니다. 이러한 단계 중에 코드를 실행하기 위해 라이프사이클 훅을 구현할 수 있습니다. 모든 주기에서 구현할 필요는 없고, 특정 주기에 구현해야할 기능이 있을 때 필요한 해당 훅 메소드를 구현하면 됩니다. Angular 생명주기 메서드 요약 단계 방법 요약 Creation  표준 JavaScript 클래스 생성자. Angular가 구성 요소를 인스턴스화할 때 실행됩니다. Change Detection  Angular가 모든 구성 요소의 입력을 초기화한 후에 한 번 실행됩니다. Change Detection  구성 요소의 입력이 변경될 때마다 실행됩니다. Change Detection  이 구성 요소의 변경 사항이 확인될 때마다 실행됩니다. Change Detection…","fields":{"slug":"/angular-lifecycle/"},"frontmatter":{"categories":"Angular","title":"앵귤러 라이프사이클","date":"July 02, 2024"}},"next":{"fields":{"slug":"/start/"}},"previous":{"fields":{"slug":"/angular-form/"}}},{"node":{"id":"2d0b7c2f-be37-5da8-ae3a-07e56238f84b","excerpt":"블로그 시작 ! 드디어 개발 블로그 시작이다.\r\n개발하면서 배웠던 것 들을 나중에 쉽게 기억 할 수 있도록 기록 할 예정이다.\r\n열심히 해보자.","fields":{"slug":"/start/"},"frontmatter":{"categories":"test","title":"시작하는 글","date":"July 01, 2024"}},"next":null,"previous":{"fields":{"slug":"/angular-lifecycle/"}}}],"categories":["All","React","Next","Angular","test"]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}