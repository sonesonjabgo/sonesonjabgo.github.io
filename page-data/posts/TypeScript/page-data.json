{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/TypeScript","result":{"pageContext":{"currentCategory":"TypeScript","categories":["All","React","javascript","TypeScript","Next","Angular","test"],"edges":[{"node":{"id":"b2fb5b35-fb13-5e9c-8248-f39c5c18fb79","excerpt":"Polymorphism (다형성) 다형성이란, 여러 타입을 받아들임으로써 여러 형태를 가지는 것을 의미함 Concrete type (string, number, boolean) 위와 같이 함수의 인자에 여러 타입이 들어갈 때 concrete type을 전부 추가하거나 any를 사용해도 된다. 하지만 위와 같이 어떤 타입으로 들어 올지 모르는 경우 ts가 타입을 추론하도록 해야한다. generic type 일종의 타입 placeholder라고 생각하면 편하다. TypePlaceholder는 해당 타입이 처음 쓰인 곳에서 타입 추론을 하고 상응하는 타입을 가질 수 있다. any와의 차이 위와 같은 경우 a가 string[] 타입이 아님에도 a.toUpperCase()가 오류를 일으키지 않는다. 제네릭 타입은 concrete 타입을 하나씩 추가하는 형태이기 때문에, 오류가 발생함 React에서 generic 활용 대표적인 예시로 useState가 있음 상태가 null일 수도 아닐 수도 …","fields":{"slug":"/typeScript-generics/"},"frontmatter":{"categories":"TypeScript","title":"제네릭 타입","date":"August 01, 2024"}},"next":{"fields":{"slug":"/react-hooks/"}},"previous":{"fields":{"slug":"/react-arraySort/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}