{"componentChunkName":"component---src-templates-blog-template-js","path":"/next-hydration/","result":{"data":{"cur":{"id":"fd6d5327-521b-510f-bf59-b5d0e6e87b29","html":"<h2 id=\"하이드레이션hydration이란\" style=\"position:relative;\"><a href=\"#%ED%95%98%EC%9D%B4%EB%93%9C%EB%A0%88%EC%9D%B4%EC%85%98hydration%EC%9D%B4%EB%9E%80\" aria-label=\"하이드레이션hydration이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하이드레이션(Hydration)이란?</h2>\n<ul>\n<li>서버사이드 렌더링(SSR)을 통해 만들어 진 인터랙티브 하지 않는 HTML을 클라이언트 측 자바스크립트를 사용하여 인터랙티브한 리액트 컴포넌트로 변환하는 과정을 말한다.\r\n(서버 환경에서 이미 렌더링된 HTML에 React를 붙이는 것)</li>\n</ul>\n<h2 id=\"in-nextjs\" style=\"position:relative;\"><a href=\"#in-nextjs\" aria-label=\"in nextjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>in Next.JS</h2>\n<ul>\n<li>\n<p>next js는 기본적으로 SSR 방식으로 랜더링 한다.</p>\n</li>\n<li>\n<p>여기서 hydration이 적용이 되는데</p>\n</li>\n<li>\n<p>초기 Html 파일을 먼저 전달하고 이후 HTML 요소들을 React 컴포넌트로 변환 및 이벤트리스너를 부착하여 React DOM에서 관리하게 한다.</p>\n</li>\n<li>\n<p>이 과정을 Hydration(수분 보충)이라고 한다.</p>\n</li>\n</ul>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<ul>\n<li>next js가 정적인 html을 먼저 띄우고</li>\n<li>그 뒤에 hydration이 이루어짐</li>\n<li>이 과정 덕에 SPA의 단점인 초기 랜더링 시 오래 걸리는 문제를 해결함\n<ul>\n<li>자바스크립트가 랜더링 하는 것을 기다리지 않기 때문</li>\n</ul>\n</li>\n<li>hydration은 단순 HTML을 React application으로 초기화 하는 작업</li>\n</ul>\n<h2 id=\"a-vs-link\" style=\"position:relative;\"><a href=\"#a-vs-link\" aria-label=\"a vs link permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a> vs <Link></h2>\n<ul>\n<li>next js를 사용하면서 페이지를 이동할 때 Link 태그를 사용하도록 권장한다.\n<ul>\n<li>Link 태그가 프레임워크의 네비게이션이기 때문</li>\n<li>a 태그는 브라우저 네비게이션</li>\n</ul>\n</li>\n<li>a 태그를 사용하면 페이지 전체를 새로 불러와서 기능 저하를 일으킨다.</li>\n<li>Link 태그는 브라우저 주소만 바꾸고 페이지 새로 불러오지는 않음.</li>\n<li>따라서 SPA인 리액트는 Link 사용을 권장함</li>\n<li>하이드레이션이 되기 전 정적 html에서 link 태그는 a 태그와 같이 취급된다.</li>\n</ul>\n<h2 id=\"use-client\" style=\"position:relative;\"><a href=\"#use-client\" aria-label=\"use client permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>use client</h2>\n<ul>\n<li>CSR을 사용할 컴포넌트 상단에 적어줘야 하는 문구이다.</li>\n<li>이는 단순히 클라이언트에서 렌더 된다는 의미가 아님.</li>\n<li>서버에서 정적인 html을 렌더하고 클라이언트에서 hydrate 하겠다는 의미.\n<ul>\n<li>이 과정으로 컴포넌트는 interactive 해짐</li>\n</ul>\n</li>\n</ul>","excerpt":"하이드레이션(Hydration)이란? 서버사이드 렌더링(SSR)을 통해 만들어 진 인터랙티브 하지 않는 HTML을 클라이언트 측 자바스크립트를 사용하여 인터랙티브한 리액트 컴포넌트로 변환하는 과정을 말한다.\r\n(서버 환경에서 이미 렌더링된 HTML에 React를 붙이는 것) in Next.JS next js는 기본적으로 SSR 방식으로 랜더링 한다. 여기서 hydration이 적용이 되는데 초기 Html 파일을 먼저 전달하고 이후 HTML 요소들을 React 컴포넌트로 변환 및 이벤트리스너를 부착하여 React DOM에서 관리하게 한다. 이 과정을 Hydration(수분 보충)이라고 한다. 정리 next js가 정적인 html을 먼저 띄우고 그 뒤에 hydration이 이루어짐 이 과정 덕에 SPA의 단점인 초기 랜더링 시 오래 걸리는 문제를 해결함 자바스크립트가 랜더링 하는 것을 기다리지 않기 때문 hydration은 단순 HTML을 React application으로 초기화 하…","frontmatter":{"date":"July 15, 2024","title":"next.js hydration","categories":"Next","author":"손재형","emoji":null},"fields":{"slug":"/next-hydration/"}},"next":{"id":"6e1a42db-4341-53d3-84fe-e3f3e2f836b2","html":"<h2 id=\"rules-of-hooks\" style=\"position:relative;\"><a href=\"#rules-of-hooks\" aria-label=\"rules of hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rules of Hooks</h2>\n<ul>\n<li>React Hook을 사용할 때 따라야 할 몇 가지 중요한 규칙</li>\n<li>이 규칙들은 Hook이 일관되게 동작하도록 하기 위함이다.</li>\n</ul>\n<h2 id=\"최상위에서만-hook-호출하기\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%83%81%EC%9C%84%EC%97%90%EC%84%9C%EB%A7%8C-hook-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"최상위에서만 hook 호출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최상위에서만 Hook 호출하기</h2>\n<ul>\n<li>Hook은 함수 컴포넌트의 최상위 수준에서만 호출해야 한다.</li>\n<li>조건문, 반복문, 중첩된 함수 내에서 Hook 호출해서는 안됨.</li>\n<li>이렇게 해야 동일한 순서로 호출되는 것을 보장 할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 올바른 사용법</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token comment\">// ...</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 잘못된 사용법</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>someCondition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 조건문 내에서 Hook 호출</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token comment\">// ...</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"react-함수-컴포넌트-또는-커스텀-hook-안에서만-hook-호출하기\" style=\"position:relative;\"><a href=\"#react-%ED%95%A8%EC%88%98-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%98%90%EB%8A%94-%EC%BB%A4%EC%8A%A4%ED%85%80-hook-%EC%95%88%EC%97%90%EC%84%9C%EB%A7%8C-hook-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"react 함수 컴포넌트 또는 커스텀 hook 안에서만 hook 호출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 함수 컴포넌트 또는 커스텀 Hook 안에서만 Hook 호출하기</h2>\n<ul>\n<li>일반 자바스크립트 함수나 클래스 컴포넌트에서 Hook을 호출하면 안됨.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 올바른 사용법</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token comment\">// ...</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCustomHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'initial'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token comment\">// ...</span>\r\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 잘못된 사용법</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">notAComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일반 함수에서 Hook 호출</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"July 12, 2024","title":"리액트 Rules of Hooks","categories":"React","author":"손재형","emoji":"⚛️"},"fields":{"slug":"/react-rulesOfHooks/"}},"prev":{"id":"7e4aca38-0718-5d91-b5c1-809463a8fe57","html":"<h2 id=\"meta-data\" style=\"position:relative;\"><a href=\"#meta-data\" aria-label=\"meta data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>meta data</h2>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> metadata<span class=\"token operator\">:</span> Metadata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    template<span class=\"token operator\">:</span> <span class=\"token string\">'%s | Next Movies'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'Next Movies'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  description<span class=\"token operator\">:</span> <span class=\"token string\">'The best movie on the best framework'</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>메타데이터를 사용하여 head에 표시될 정보를 간편하게 바꿀 수 있다.</p>\n</li>\n<li>\n<p>next js는 메타데이터의 타입도 제공함</p>\n<ul>\n<li>규칙에 맞춰 넣으면 된다</li>\n</ul>\n</li>\n<li>\n<p>메타데이터는 layout.tsx와 page.tsx에만 작성 가능하다.</p>\n</li>\n<li>\n<p>client component에서는 메타데이터 export 불가능하다.</p>\n</li>\n<li>\n<p>공식 문서 : <a href=\"https://nextjs.org/docs/app/building-your-application/optimizing/metadata\">https://nextjs.org/docs/app/building-your-application/optimizing/metadata</a></p>\n</li>\n</ul>","frontmatter":{"date":"July 15, 2024","title":"next.js 메타 데이터","categories":"Next","author":"손재형","emoji":null},"fields":{"slug":"/next-metaData/"}},"site":{"siteMetadata":{"siteUrl":"https://sonesonjabgo.github.io","comments":{"utterances":{"repo":"sonesonjabgo/sonesonjabgo.github.io"}}}}},"pageContext":{"slug":"/next-hydration/","nextSlug":"/react-rulesOfHooks/","prevSlug":"/next-metaData/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}